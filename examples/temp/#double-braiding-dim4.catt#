coh id (x : *) : x -> x.

coh comp (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) ( f2 : x2 -> x3) : x1 -> x3.

coh comp3 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) : x1 -> x4.

coh comp4 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
x1 -> x5.

coh comp5 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6):
x1 -> x6.

coh comp6 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7):
x1 -> x7.

coh comp7 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8):
x1 -> x8.

coh comp8 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9):
x1 -> x9.

coh comp9 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10):
x1 -> x10.

coh comp10 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10) (x11 : *) (f10 : x10 -> x11):
x1 -> x11.

coh comp11 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10) (x11 : *) (f10 : x10 -> x11) (x12 : *) (f11 : x11 -> x12):
x1 -> x12.

coh comp12 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10) (x11 : *) (f10 : x10 -> x11) (x12 : *) (f11 : x11 -> x12) (x13 : *) (f12 : x12 -> x13):
x1 -> x13.

coh  whiskl (x : *) (y : *) (f : x -> y) (z : *) (g1 : y -> z) (g2 : y -> z) (a : g1 -> g2) :
comp f g1 -> comp f g2.

coh whiskr (x : *) (y : *) (f1 : x -> y) (f2 : x -> y) (a : f1 -> f2) (z : *) (g : y -> z) :
comp f1 g -> comp f2 g.

coh hcomp (x : *) (y : *) (f1 : x -> y) (f2 : x -> y) (a : f1 -> f2) (z : *) (g1 : y -> z) (g2 : y -> z) (b : g1 -> g2) :
comp f1 g1 -> comp f2 g2.

coh hcompcomp (x : *) (y : *) (f1 : x -> y)
    	      	      	      (f2 : x -> y) (a1 : f1 -> f2)
			      (f3 : x -> y) (a2 : f2 -> f3)
		      (z : *) (g1 : y -> z)
		      	      (g2 : y -> z) (b1 : g1 -> g2)
			      (g3 : y -> z) (b2 : g2 -> g3) :
	       comp (hcomp a1 b1) (hcomp a2 b2) -> hcomp (comp a1 a2) (comp b1 b2).

coh hcompid (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) :
hcomp (id f) (id g) -> id (comp f g).

coh unitl (x : *) (y : *) (f : x -> y) : comp (id x) f -> f.
coh unitl- (x : *) (y : *) (f : x -> y) : f -> comp (id x) f.
coh unitlU (x : *) (y : *) (f : x -> y) : comp (unitl f) (unitl- f) -> id (comp (id x) f).

coh unitr (x : *) (y : *) (f : x -> y) : comp f (id y) -> f.
coh unitr- (x : *) (y : *) (f : x -> y) : f -> comp f (id y).
coh unitrU (x : *) (y : *) (f : x -> y) : comp (unitr f) (unitr- f) -> id (comp f (id y)).

coh hunitl (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g): comp3 (unitl- f) (hcomp (id (id x)) a) (unitl g) -> a. 
coh hunitl- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g):  a -> comp3 (unitl- f) (hcomp (id (id x)) a) (unitl g). 
coh hunitlCU (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) : comp (hunitl- a) (hunitl a) -> id a. 

coh hunitr (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g): comp3 (unitr- f) (hcomp a (id (id y))) (unitr g) -> a. 
coh hunitr- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g):  a -> comp3 (unitr- f) (hcomp a (id (id y))) (unitr g). 
coh hunitrCU (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) : comp (hunitr- a) (hunitr a) -> id a.


coh exch (x : *)
         (y : *) (f1 : x -> y)
	         (f2 : x -> y) (a1 : f1 -> f2)
		 (f3 : x -> y) (a2 : f2 -> f3)
	 (z : *) (g1 : y -> z)
	         (g2 : y -> z) (b1 : g1 -> g2)
		 (g3 : y -> z) (b2 : g2 -> g3) :
comp (hcomp a1 b1) (hcomp a2 b2) -> hcomp (comp a1 a2) (comp b1 b2).

coh exch- (x : *)
       	  (y : *) (f1 : x -> y)
	          (f2 : x -> y) (a1 : f1 -> f2)
	      	  (f3 : x -> y) (a2 : f2 -> f3)
	  (z : *) (g1 : y -> z)
	          (g2 : y -> z) (b1 : g1 -> g2)
	       	  (g3 : y -> z) (b2 : g2 -> g3) :
hcomp (comp a1 a2) (comp b1 b2) -> comp (hcomp a1 b1) (hcomp a2 b2).

coh exchU (x : *)
       	  (y : *) (f1 : x -> y)
	          (f2 : x -> y) (a1 : f1 -> f2)
	      	  (f3 : x -> y) (a2 : f2 -> f3)
	  (z : *) (g1 : y -> z)
	          (g2 : y -> z) (b1 : g1 -> g2)
	       	  (g3 : y -> z) (b2 : g2 -> g3) :
comp (exch a1 a2 b1 b2) (exch- a1 a2 b1 b2) -> id (comp (hcomp a1 b1) (hcomp a2 b2)).

check (x : *) (y : *) (z : *) (t : *) (f1 : x -> y) (f2 : x -> y) (g1 : y -> z) (g2 : y -> z) (h1 : z -> t) (h2 : z -> t) (a : f1 -> f2) (b : g1 -> g2) (c : h1  -> h2) = hcomp a (hcomp b c). 

check (x : *) (alpha : id (id x) -> id (id x)) (beta: id (id x) -> id (id x)) = hcomp alpha beta.



coh hinvlr (x : *) : comp (unitl (id x)) (unitr- (id x)) -> id (comp (id x) (id x)).
coh hinvrl (x : *) : comp (unitr (id x)) (unitl- (id x)) -> id (comp (id x) (id x)).
coh hinvlr- (x : *) : id (comp (id x) (id x)) -> comp (unitl (id x)) (unitr- (id x)).
coh hinvrl- (x : *) : id (comp (id x) (id x)) -> comp (unitr (id x)) (unitl- (id x)).
coh hinvlrU (x: *) : comp (hinvlr x) (hinvlr- x) -> id (comp (unitl (id x)) (unitr- (id x))).

coh equivlr- (x : *) : unitl- (id x) -> unitr- (id x).
coh equivrl- (x : *) : unitr- (id x) -> unitl- (id x).
coh equivrl (x : *) : unitr (id x) -> unitl (id x).
coh equivlr (x : *) : unitl (id x) -> unitr (id x).


coh cancel3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2) :
		     comp3 f1 (id x1) f2 -> comp f1 f2.

coh can3F (x0 : *) (x1 : *) (f1 : x0 -> x1)
                   (x2 : *) (f2 : x1 -> x2) :
		   comp3 f1 (id x1) f2 -> comp f1 f2.


coh cancel5 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)	
 		     (x3 : *) (f3 : x2 -> x3) 
		     (x4 : *) (f4 : x3 -> x4) :
		     comp5 f1 f2 (id x2) f3 f4 -> comp4 f1 f2 f3 f4.

coh cancel5- (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2)	
 	 	      (x3 : *) (f3 : x2 -> x3) 
	 	      (x4 : *) (f4 : x3 -> x4) :
		      comp4 f1 f2 f3 f4 -> comp5 f1 f2 (id x2) f3 f4.

coh cancel5U (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2)	
 		      (x3 : *) (f3 : x2 -> x3) 
		      (x4 : *) (f4 : x3 -> x4) :
		      comp (cancel5 f1 f2 f3 f4) (cancel5- f1 f2 f3 f4) -> id (comp5 f1 f2 (id x2) f3 f4).

coh can5F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp5 f1 f2 (id x3) f3 f4 -> comp3 f1 (comp f2 f3) f4.

coh can7F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) :
comp7 f1 f2 f3 (id x4) f4 f5 f6 -> comp5 f1 f2 (comp f3 f4) f5 f6.

coh can9F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) :
comp9 f1 f2 f3 f4 (id x5) f5 f6 f7 f8 -> comp7 f1 f2 f3 (comp f4 f5) f6 f7 f8.

coh can11F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10) (x11 : *) (f10 : x10 -> x11):
comp11 f1 f2 f3 f4 f5 (id x6) f6 f7 f8 f9 f10 -> comp9 f1 f2 f3 f4 (comp f5 f6) f7 f8 f9 f10.

coh assoc4 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)	
		    (x3 : *) (f3 : x2 -> x3) 
		    (x4 : *) (f4 : x3 -> x4) :
		    comp4 f1 f2 f3 f4 -> comp3 f1 (comp f2 f3) f4.

coh assoc4- (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)	
		     (x3 : *) (f3 : x2 -> x3) 
		     (x4 : *) (f4 : x3 -> x4) :
		     comp3 f1 (comp f2 f3) f4 -> comp4 f1 f2 f3 f4.

coh assoc4U (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)	
	 	     (x3 : *) (f3 : x2 -> x3) 
		     (x4 : *) (f4 : x3 -> x4) :
		     comp (assoc4 f1 f2 f3 f4) (assoc4- f1 f2 f3 f4) -> id (comp4 f1 f2 f3 f4).

coh assoc2-2 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2)	
		      (x3 : *) (f3 : x2 -> x3) 
		      (x4 : *) (f4 : x3 -> x4) :
		      comp (comp f1 f2) (comp f3 f4) -> comp3 f1 (comp f2 f3) f4.


coh assoc6 (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3)
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5)
		    (x6 : *) (f6 : x5 -> x6) :
		    comp (comp3 f1 f2 f3) (comp3 f4 f5 f6) -> comp5 f1 f2 (comp f3 f4) f5 f6.

coh assoc6- (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	     (x2 : *) (f2 : x1 -> x2)
		     (x3 : *) (f3 : x2 -> x3)
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5)
		     (x6 : *) (f6 : x5 -> x6) :
		     comp5 f1 f2 (comp f3 f4) f5 f6 -> comp (comp3 f1 f2 f3) (comp3 f4 f5 f6).

coh assoc6U (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3)
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5)
		    (x6 : *) (f6 : x5 -> x6) :
		    comp (assoc6 f1 f2 f3 f4 f5 f6) (assoc6- f1 f2 f3 f4 f5 f6) -> id (comp (comp3 f1 f2 f3) (comp3 f4 f5 f6)).


coh assoc12 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)	
		     (x3 : *) (f3 : x2 -> x3) 
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5)
                     (x6 : *) (f6 : x5 -> x6)	
		     (x7 : *) (f7 : x6 -> x7) 
		     (x8 : *) (f8 : x7 -> x8)
		     (x9 : *) (f9 : x8 -> x9)
                     (x10 : *) (f10 : x9 -> x10)	
		     (x11 : *) (f11 : x10 -> x11) 
		     (x12 : *) (f12 : x11 -> x12) :
		     comp (comp6 f1 f2 f3 f4 f5 f6) (comp6 f7 f8 f9 f10 f11 f12) -> comp11 f1 f2 f3 f4 f5 (comp f6 f7) f8 f9 f10 f11 f12.

coh assoc10 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)	
		     (x3 : *) (f3 : x2 -> x3) 
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5)
                     (x6 : *) (f6 : x5 -> x6)	
		     (x7 : *) (f7 : x6 -> x7) 
		     (x8 : *) (f8 : x7 -> x8)
		     (x9 : *) (f9 : x8 -> x9)
                     (x10 : *) (f10 : x9 -> x10) :
		     comp10 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 -> comp9 f1 f2 f3 f4 (comp f5 f6) f7 f8 f9 f10.
		     

coh rew3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                  (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (a : f2 -> g2)	
		  (x3 : *) (f3 : x2 -> x3) : 
		  comp3 f1 f2 f3 -> comp3 f1 g2 f3.

coh rew3comp (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (a : f2 -> g2)
		      	       	     	       (h2 : x1 -> x2) (b : g2  -> h2)
		      (x3 : *) (f3 : x2 -> x3):
		      comp (rew3 f1 a f3) (rew3 f1 b f3) -> rew3 f1 (comp a b) f3.

coh rrew3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                   (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (a : f2 -> g2)
		      	       	       	       	       	    (b : f2 -> g2) (c : a -> b)   
		   (x3 : *) (f3 : x2 -> x3) : 
		  rew3 f1 a f3 -> rew3 f1 b f3.

coh rew3id (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)
	            (x3 : *) (f3 : x2 -> x3) : 
		    rew3 f1 (id f2) f3 -> id (comp3 f1 f2 f3).

coh rew1-3 (x0 : *) (x1 : *) (f1 : x0 -> x1) (g1 : x0 -> x1) (a : f1 -> g1)
    	       	    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (b : f3 -> g3) :
comp3 f1 f2 f3 -> comp3 g1 f2 g3.

coh rew5 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                  (x2 : *) (f2 : x1 -> x2)
		  (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		  (x4 : *) (f4 : x3 -> x4)
		  (x5 : *) (f5 : x4 -> x5) :
		  comp5 f1 f2 f3 f4 f5 -> comp5 f1 f2 g3 f4 f5.

coh rew5comp (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2)
		      (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		                               (h3 : x2 -> x3) (b : g3 -> h3)
		      (x4 : *) (f4 : x3 -> x4)
		      (x5 : *) (f5 : x4 -> x5) :
		      comp (rew5 f1 f2 a f4 f5) (rew5 f1 f2 b f4 f5) -> rew5 f1 f2 (comp a b) f4 f5.

coh rrew5 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                   (x2 : *) (f2 : x1 -> x2)
		   (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		       	    	     	    	     	    (b : f3 -> g3) (c : a -> b)
		   (x4 : *) (f4 : x3 -> x4)
		   (x5 : *) (f5 : x4 -> x5) :
		   rew5 f1 f2 a f4 f5 -> rew5 f1 f2 b f4 f5.

coh rew5id (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3)
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5) :
		    rew5 f1 f2 (id f3) f4 f5 -> id (comp5 f1 f2 f3 f4 f5).

coh rew7 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                  (x2 : *) (f2 : x1 -> x2)
		  (x3 : *) (f3 : x2 -> x3) 
		  (x4 : *) (f4 : x3 -> x4) (g4 : x3 -> x4) (a : f4 -> g4)
		  (x5 : *) (f5 : x4 -> x5) 
                  (x6 : *) (f6 : x5 -> x6) 
		  (x7 : *) (f7 : x6 -> x7)  : 
		  comp7 f1 f2 f3 f4 f5 f6 f7 -> comp7 f1 f2 f3 g4 f5 f6 f7.


coh rew9 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                  (x2 : *) (f2 : x1 -> x2)
		  (x3 : *) (f3 : x2 -> x3) 
		  (x4 : *) (f4 : x3 -> x4)
		  (x5 : *) (f5 : x4 -> x5) (g5 : x4 -> x5) (a : f5 -> g5)
                  (x6 : *) (f6 : x5 -> x6) 
		  (x7 : *) (f7 : x6 -> x7) 
		  (x8 : *) (f8 : x7 -> x8)
		  (x9 : *) (f9 : x8 -> x9) : 
		  comp9 f1 f2 f3 f4 f5 f6 f7 f8 f9 -> comp9 f1 f2 f3 f4 g5 f6 f7 f8 f9.

coh rew11 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                   (x2 : *) (f2 : x1 -> x2)
		   (x3 : *) (f3 : x2 -> x3) 
		   (x4 : *) (f4 : x3 -> x4)
		   (x5 : *) (f5 : x4 -> x5)
                   (x6 : *) (f6 : x5 -> x6) (g6 : x5  -> x6) (a : f6 -> g6)	
		   (x7 : *) (f7 : x6 -> x7) 
		   (x8 : *) (f8 : x7 -> x8)
		   (x9 : *) (f9 : x8 -> x9)
                   (x10 : *) (f10 : x9 -> x10)	
	     	   (x11 : *) (f11 : x10 -> x11) :
		   comp11 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 -> comp11 f1 f2 f3 f4 f5 g6 f7 f8 f9 f10 f11.		   		   

coh hrew (x : *) (y : *) (f : x -> y) (g : x -> y) (a0 : f -> g) (a1 : f -> g) (al : a0 -> a1)
    	      	 (z : *) (h : y -> z) (k : y -> z) (b0 : h -> k) (b1 : h -> k) (bet : b0 -> b1) :
		 hcomp a0 b0 -> hcomp a1 b1.

coh hrrew (x : *) (y : *) (f : x -> y)
                  (g : x -> y) (a0 : f -> g)
		       	       (a1 : f -> g) (al0 : a0 -> a1)
			       	       	     (al1 : a0 -> a1) (c : al0 -> al1)
    	      	  (z : *) (h : y -> z)
		       	  (k : y -> z) (b0 : h -> k)
			       	       (b1 : h -> k) (bet0 : b0 -> b1)
				       	       	     (bet1 : b0 -> b1) (d : bet0 -> bet1) :
		  hrew al0 bet0 -> hrew al1 bet1.

coh hrewcomp (x : *) (y : *) (f : x -> y)
    	     	     	     (g : x -> y) (a0 : f -> g)
			     	       	  (a1 : f -> g) (al1 : a0 -> a1)
					  (a2 : f -> g) (al2 : a1 -> a2)
    	      	     (z : *) (h : y -> z)
		     	     (k : y -> z) (b0 : h -> k)
			     	       	  (b1 : h -> k) (bet1 : b0 -> b1)
					  (b2 : h -> k) (bet2 : b1 -> b2) :
	     comp (hrew al1 bet1) (hrew al2 bet2) -> hrew (comp al1 al2) (comp bet1 bet2).

coh hrewid (x : *) (y : *) (f : x -> y) (g : x -> y) (a0 : f -> g) 
    	      	   (z : *) (h : y -> z) (k : y -> z) (b0 : h -> k) :
	   hrew (id a0) (id b0) -> id (hcomp a0 b0).


### Eckmann-Hilton morphism
let half-eh1 (x : *) (a : id x -> id x) (b : id x -> id x) =
comp6 (hcomp (hunitl- a) (hunitr- b))
      (assoc6 (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
      (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr x) (hcomp b (id (id x))) (unitr (id x)))
      (cancel5 (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
      (assoc4 (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
      (rew3 (unitl- (id x)) (comp (exch (id (id x)) b a (id (id x))) (hrew (unitl b) (unitr a))) (unitr (id x))).

# let half-eh2 (x : *) (a : id x -> id x) (b : id x -> id x) =
# comp6 (rew3 (unitr- (id x)) (comp (hrew (unitr- b) (unitl- a)) (exch- b (id (id x)) (id (id x)) a)) (unitl (id x)))
# (assoc4- (unitr- (id x)) (hcomp b (id (id x))) (hcomp (id (id x)) a) (unitl (id x)))
# (cancel5- (unitr- (id x)) (hcomp b (id (id x))) (hcomp (id (id x)) a) (unitl (id x)))
# (rew5 (unitr- (id x)) (hcomp b (id (id x))) (hinvrl- x) (hcomp (id (id x)) a) (unitl (id x)))
# (assoc6- (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)) (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)))
# (hcomp (hunitr b) (hunitl a)).

# let eckmann-hilton (x : *) (a : id x -> id x) (b : id x -> id x) =
# comp3 (half-eh1 x a b)
#       (rew1-3 (equivlr- x) (hcomp b a) (equivrl x))
#       (half-eh2 x a b).

### Inverse of Ekcmann-Hilton Morphism : turning the other way around
# let half-eh1- (x : *) (a : id x -> id x) (b : id x -> id x) =
# comp6 (hcomp (hunitr- a) (hunitl- b))
#       (assoc6 (unitr- (id x)) (hcomp a (id (id x))) (unitr (id x)) (unitl- (id x)) (hcomp (id (id x)) b) (unitl (id x)))
#       (rew5 (unitr- (id x)) (hcomp a (id (id x))) (hinvrl x) (hcomp (id (id x)) b) (unitl (id x)))
#       (cancel5 (unitr- (id x)) (hcomp a (id (id x))) (hcomp (id (id x)) b) (unitl (id x)))
#       (assoc4 (unitr- (id x)) (hcomp a (id (id x))) (hcomp (id (id x)) b) (unitl (id x)))
#       (rew3 (unitr- (id x)) (comp (exch a (id (id x)) (id (id x)) b) (hrew (unitr a) (unitl b))) (unitl (id x))).

let half-eh2- (x : *) (a : id x -> id x) (b : id x -> id x) =
comp6 (rew3 (unitl- (id x)) (comp (hrew (unitl- a) (unitr- b)) (exch- (id (id x)) a b (id (id x)))) (unitr (id x)))
     (assoc4- (unitl- (id x)) (hcomp (id (id x)) b) (hcomp a (id (id x))) (unitr (id x)))
     (cancel5- (unitl- (id x)) (hcomp (id (id x)) b) (hcomp a (id (id x))) (unitr (id x)))
     (rew5 (unitl- (id x)) (hcomp (id (id x)) b) (hinvlr- x) (hcomp a (id (id x))) (unitr (id x)))
     (assoc6- (unitl- (id x)) (hcomp (id (id x)) b) (unitl (id x)) (unitr- (id x)) (hcomp a (id (id x))) (unitr (id x)))
     (hcomp (hunitl b) (hunitr a)).

# let eckmann-hilton- (x : *) (a : id x -> id x) (b : id x -> id x) =
# comp3 (half-eh1- x a b)
#       (rew1-3 (equivrl- x) (hcomp a b) (equivlr x))
#       (half-eh2- x a b).

### Cancellation on Eckmann-Hilton with its inverse
let lem (x : *) (a : id x -> id x) (b : id x  -> id x) =
(comp3 (rew3comp (unitl- (id x))
                 (comp (exch (id (id x)) b a (id (id x))) (hrew (unitl b) (unitr a)))
		 (comp (hrew (unitl- b) (unitr- a)) (exch- (id (id x)) b a (id (id x))))
		 (unitr (id x)))
       (rrew3 (unitl- (id x))
      	     (comp4 (assoc2-2 (exch (id (id x)) b a (id (id x)))
       	       	              (hrew (unitl b) (unitr a))
		              (hrew (unitl- b) (unitr- a))
		              (exch- (id (id x)) b a (id (id x))))
       	            (rew3 (exch (id (id x)) b a (id (id x)))
	     	    	  (comp3 (hrewcomp (unitl b) (unitl- b) (unitr a) (unitr- a))
		   	   	 (hrrew (unitlU b) (unitrU a))
			   	 (hrewid (comp (id (id x)) b) (comp a (id (id x)))))
		          (exch- (id (id x)) b a (id (id x))))
	            (cancel3 (exch  (id (id x)) b a (id (id x)))
	     	       	     (exch- (id (id x)) b a (id (id x))))
	            (exchU (id (id x)) b a (id (id x))))
             (unitr (id x)))
       (rew3id (unitl- (id x)) (comp (hcomp (id (id x)) a) (hcomp b (id (id x)))) (unitr (id x)))).


let lem2  (x : *) (a : id x -> id x) (b : id x  -> id x) =
comp3 (rew5comp (unitl- (id x))
                (hcomp (id (id x)) a)
	        (hinvlr x)
	        (hinvlr- x)
	        (hcomp b (id (id x)))
	        (unitr (id x)))
      (rrew5 (unitl- (id x))
             (hcomp (id (id x)) a)
  	     (hinvlrU x)
	     (hcomp b (id (id x)))
	     (unitr (id x)))
      (rew5id (unitl- (id x))
              (hcomp (id (id x)) a)
	      (comp  (unitl  (id x)) (unitr-  (id x)))
	      (hcomp b (id (id x)))
	      (unitr (id x))).

     
# check (x : *) (a : id x -> id x) (b : id x -> id x) =
# comp3 (hcompcomp (hunitl- a) (hunitl a) (hunitr- b) (hunitr b))
#       (hrew (hunitlCU a) (hunitrCU b))
#       (hcompid a b).


let eh1U (x : *) (a : id x -> id x) (b : id x -> id x) =
comp9 (assoc12 (hcomp (hunitl- a) (hunitr- b))
      	       (assoc6 (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	       (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr x) (hcomp b (id (id x))) (unitr (id x)))
	       (cancel5 (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (assoc4 (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (rew3 (unitl- (id x)) (comp (exch (id (id x)) b a (id (id x))) (hrew (unitl b) (unitr a))) (unitr (id x)))
	       (rew3 (unitl- (id x)) (comp (hrew (unitl- b) (unitr- a)) (exch- (id (id x)) b a (id (id x)))) (unitr (id x)))
	       (assoc4- (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (cancel5- (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr- x) (hcomp b (id (id x))) (unitr (id x)))
	       (assoc6- (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	       (hcomp (hunitl a) (hunitr b)))
       (rew11  (hcomp (hunitl- a) (hunitr- b))
      	       (assoc6 (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	       (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr x) (hcomp b (id (id x))) (unitr (id x)))
	       (cancel5 (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (assoc4 (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (lem x a b)
	       (assoc4- (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (cancel5- (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr- x) (hcomp b (id (id x))) (unitr (id x)))
	       (assoc6- (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	       (hcomp (hunitl a) (hunitr b)))
       (can11F (hcomp (hunitl- a) (hunitr- b))
      	       (assoc6 (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	       (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr x) (hcomp b (id (id x))) (unitr (id x)))
	       (cancel5 (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (assoc4 (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (assoc4- (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (cancel5- (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	       (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr- x) (hcomp b (id (id x))) (unitr (id x)))
	       (assoc6- (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	       (hcomp (hunitl a) (hunitr b)))
	(rew9 (hcomp (hunitl- a) (hunitr- b))
      	      (assoc6 (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	      (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr x) (hcomp b (id (id x))) (unitr (id x)))
	      (cancel5 (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	      (assoc4U (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	      (cancel5- (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	      (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr- x) (hcomp b (id (id x))) (unitr (id x)))
	      (assoc6- (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	      (hcomp (hunitl a) (hunitr b)))
	 (can9F (hcomp (hunitl- a) (hunitr- b))
      	      	(assoc6 (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	      	(rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr x) (hcomp b (id (id x))) (unitr (id x)))
	      	(cancel5 (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	      	(cancel5- (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	      	(rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr- x) (hcomp b (id (id x))) (unitr (id x)))
	      	(assoc6- (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	     	(hcomp (hunitl a) (hunitr b)))
	(rew7 (hcomp (hunitl- a) (hunitr- b))
      	      (assoc6 (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	      (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr x) (hcomp b (id (id x))) (unitr (id x)))
	      (cancel5U (unitl- (id x)) (hcomp (id (id x)) a) (hcomp b (id (id x))) (unitr (id x)))
	      (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr- x) (hcomp b (id (id x))) (unitr (id x)))
	      (assoc6- (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	      (hcomp (hunitl a) (hunitr b)))
	(can7F (hcomp (hunitl- a) (hunitr- b))
      	       (assoc6 (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	       (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr x) (hcomp b (id (id x))) (unitr (id x)))
	       (rew5 (unitl- (id x)) (hcomp (id (id x)) a) (hinvlr- x) (hcomp b (id (id x))) (unitr (id x)))
	       (assoc6- (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	       (hcomp (hunitl a) (hunitr b)))
	 (rew5 (hcomp (hunitl- a) (hunitr- b))
      	       (assoc6 (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	       (lem2 x a b)
	       (assoc6- (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	       (hcomp (hunitl a) (hunitr b)))
	 (can5F (hcomp (hunitl- a) (hunitr- b))
      	        (assoc6 (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	        (assoc6- (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	        (hcomp (hunitl a) (hunitr b)))
	(rew3 (hcomp (hunitl- a) (hunitr- b))
	      (assoc6U (unitl- (id x)) (hcomp (id (id x)) a) (unitl (id x)) (unitr- (id x)) (hcomp b (id (id x))) (unitr (id x)))
	      (hcomp (hunitl a) (hunitr b)))
	(can3F (hcomp (hunitl- a) (hunitr- b))
	       (hcomp (hunitl a) (hunitr b)))
	(comp3 (hcompcomp (hunitl- a) (hunitl a) (hunitr- b) (hunitr b))
      	      (hrew (hunitlCU a) (hunitrCU b))
      	      (hcompid a b)).
     

# let ehU (x : *) (a : id x -> id x) (b : id x -> id x) =
# comp (eckmann-hilton x a b) (eckmann-hilton- x b a).

# let eh1' (x : *) (a : id (id x) -> id (id x)) (b : id (id x) -> id (id x))



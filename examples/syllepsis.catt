### Definition of identity morphism
coh id (x : *) : x -> x

### Definition of compositions
# Format = comp(n) (n = arity of the composition)
coh comp (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) ( f2 : x2 -> x3) : x1 -> x3

coh comp3 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) : x1 -> x4

coh comp4 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
x1 -> x5

coh comp5 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6):
x1 -> x6

coh comp6 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7):
x1 -> x7

coh comp7 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8):
x1 -> x8

coh comp8 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9):
x1 -> x9

coh comp9 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10):
x1 -> x10

coh comp10 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10) (x11 : *) (f10 : x10 -> x11):
x1 -> x11

coh comp11 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10) (x11 : *) (f10 : x10 -> x11) (x12 : *) (f11 : x11 -> x12):
x1 -> x12

coh comp12 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10) (x11 : *) (f10 : x10 -> x11) (x12 : *) (f11 : x11 -> x12) (x13 : *) (f12 : x12 -> x13):
x1 -> x13

coh comp13 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10) (x11 : *) (f10 : x10 -> x11) (x12 : *) (f11 : x11 -> x12) (x13 : *) (f12 : x12 -> x13) (x14 : *) (f13 : x13 -> x14):
x1 -> x14


### Definition of associators
# Format = focus(n) (n = half the arity)
# Ex : focus 3 == (f1 f2 f3) (f4 f5 f6) -> f1 f2 (f3 f4) f5 f6
coh focus2 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)	
		    (x3 : *) (f3 : x2 -> x3) 
		    (x4 : *) (f4 : x3 -> x4) :
		    comp (comp f1 f2) (comp f3 f4) -> comp3 f1 (comp f2 f3) f4

coh focus3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3)
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5)
		    (x6 : *) (f6 : x5 -> x6) :
		    comp (comp3 f1 f2 f3) (comp3 f4 f5 f6) -> comp5 f1 f2 (comp f3 f4) f5 f6

coh focus5 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)	
		    (x3 : *) (f3 : x2 -> x3) 
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5)
                    (x6 : *) (f6 : x5 -> x6)	
		    (x7 : *) (f7 : x6 -> x7) 
		    (x8 : *) (f8 : x7 -> x8)
		    (x9 : *) (f9 : x8 -> x9)
                    (x10 : *) (f10 : x9 -> x10)	:
		    comp (comp5 f1 f2 f3 f4 f5) (comp5 f6 f7 f8 f9 f10) -> comp9 f1 f2 f3 f4 (comp f5 f6) f7 f8 f9 f10

coh focus6 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)	
		    (x3 : *) (f3 : x2 -> x3) 
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5)
                    (x6 : *) (f6 : x5 -> x6)	
		    (x7 : *) (f7 : x6 -> x7) 
		    (x8 : *) (f8 : x7 -> x8)
		    (x9 : *) (f9 : x8 -> x9)
                    (x10 : *) (f10 : x9 -> x10)	
		    (x11 : *) (f11 : x10 -> x11) 
		    (x12 : *) (f12 : x11 -> x12) :
		    comp (comp6 f1 f2 f3 f4 f5 f6) (comp6 f7 f8 f9 f10 f11 f12) -> comp11 f1 f2 f3 f4 f5 (comp f6 f7) f8 f9 f10 f11 f12

coh focus7 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)	
		    (x3 : *) (f3 : x2 -> x3) 
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5)
                    (x6 : *) (f6 : x5 -> x6)	
		    (x7 : *) (f7 : x6 -> x7) 
		    (x8 : *) (f8 : x7 -> x8)
		    (x9 : *) (f9 : x8 -> x9)
                    (x10 : *) (f10 : x9 -> x10)	
		    (x11 : *) (f11 : x10 -> x11) 
		    (x12 : *) (f12 : x11 -> x12)
		    (x13 : *) (f13 : x12 -> x13)
		    (x14 : *) (f14 : x13 -> x14) :
		    comp (comp7 f1 f2 f3 f4 f5 f6 f7) (comp7 f8 f9 f10 f11 f12 f13 f14) -> comp13 f1 f2 f3 f4 f5 f6 (comp f7 f8) f9 f10 f11 f12 f13 f14

### Inverses of associators
# Format = name- (name = name of the coherence) : inverse of name
coh focus2- (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)	
		    (x3 : *) (f3 : x2 -> x3) 
		    (x4 : *) (f4 : x3 -> x4) :
		    comp3 f1 (comp f2 f3) f4 -> comp (comp f1 f2) (comp f3 f4)

coh focus3- (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	     (x2 : *) (f2 : x1 -> x2)
		     (x3 : *) (f3 : x2 -> x3)
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5)
		     (x6 : *) (f6 : x5 -> x6) :
		     comp5 f1 f2 (comp f3 f4) f5 f6 -> comp (comp3 f1 f2 f3) (comp3 f4 f5 f6)
coh focus6- (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)	
		    (x3 : *) (f3 : x2 -> x3) 
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5)
                    (x6 : *) (f6 : x5 -> x6)	
		    (x7 : *) (f7 : x6 -> x7) 
		    (x8 : *) (f8 : x7 -> x8)
		    (x9 : *) (f9 : x8 -> x9)
                    (x10 : *) (f10 : x9 -> x10)	
		    (x11 : *) (f11 : x10 -> x11) 
		    (x12 : *) (f12 : x11 -> x12) :
		    comp11 f1 f2 f3 f4 f5 (comp f6 f7) f8 f9 f10 f11 f12 -> comp (comp6 f1 f2 f3 f4 f5 f6) (comp6 f7 f8 f9 f10 f11 f12)


### Higher coherences for associators (cancellation lemmas)
# Format = nameU (name = name of the coherence) : cancellation of name and name-
#          nameCU                               : cancellation of name- and name

coh focus3U (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	     (x2 : *) (f2 : x1 -> x2)
	  	     (x3 : *) (f3 : x2 -> x3)
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5)
		     (x6 : *) (f6 : x5 -> x6) :
		     comp (focus3 f1 f2 f3 f4 f5 f6) (focus3- f1 f2 f3 f4 f5 f6) -> id (comp (comp3 f1 f2 f3) (comp3 f4 f5 f6))

coh focus3U- (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	      (x2 : *) (f2 : x1 -> x2)
	  	      (x3 : *) (f3 : x2 -> x3)
		      (x4 : *) (f4 : x3 -> x4)
		      (x5 : *) (f5 : x4 -> x5)
		      (x6 : *) (f6 : x5 -> x6) :
		      id (comp (comp3 f1 f2 f3) (comp3 f4 f5 f6)) -> comp (focus3 f1 f2 f3 f4 f5 f6) (focus3- f1 f2 f3 f4 f5 f6)

coh focus3CU (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	     (x2 : *) (f2 : x1 -> x2)
	  	     (x3 : *) (f3 : x2 -> x3)
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5)
		     (x6 : *) (f6 : x5 -> x6) :
		     comp (focus3- f1 f2 f3 f4 f5 f6) (focus3 f1 f2 f3 f4 f5 f6) -> id (comp5  f1 f2 (comp f3 f4) f5 f6)

### Unitors for composition
# Format = id(n)@(k) (n = arity, k < n, k = where to insert the identity)
coh id2@1 (x : *) (y : *) (f : x -> y) : comp (id x) f -> f
coh id2@1- (x : *) (y : *) (f : x -> y) : f -> comp (id x) f

coh id2@2 (x : *) (y : *) (f : x -> y) : comp f (id y) -> f
coh id2@2- (x : *) (y : *) (f : x -> y) : f -> comp f (id y)

coh id3@2 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                   (x2 : *) (f2 : x1 -> x2) :
		   comp3 f1 (id x1) f2 -> comp f1 f2

coh id3@2- (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2) :
		    comp f1 f2 -> comp3 f1 (id x1) f2


coh id5@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)	
 		     (x3 : *) (f3 : x2 -> x3) 
		     (x4 : *) (f4 : x3 -> x4) :
		     comp5 f1 f2 (id x2) f3 f4 -> comp4 f1 f2 f3 f4

coh id5@3- (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2)	
 	 	      (x3 : *) (f3 : x2 -> x3) 
	 	      (x4 : *) (f4 : x3 -> x4) :
		      comp4 f1 f2 f3 f4 -> comp5 f1 f2 (id x2) f3 f4

coh id5@3U (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2)	
 		      (x3 : *) (f3 : x2 -> x3) 
		      (x4 : *) (f4 : x3 -> x4) :
		      comp (id5@3 f1 f2 f3 f4) (id5@3- f1 f2 f3 f4) -> id (comp5 f1 f2 (id x2) f3 f4)

### Defitions of rewritings (= whiskerings)
# Format = rew(n)@(k) (n = arity, k < n, k = argument where to perform the rewriting)
#          rew(n)A  (n = arity, A = rewrite in all the arguments)
coh rew2@1 (x : *) (y : *) (f1 : x -> y) (f2 : x -> y) (a : f1 -> f2) (z : *) (g : y -> z) :
comp f1 g -> comp f2 g

coh rew2@2 (x : *) (y : *) (f : x -> y) (z : *) (g1 : y -> z) (g2 : y -> z) (a : g1 -> g2) :
comp f g1 -> comp f g2

coh rew2A (x : *) (y : *) (f1 : x -> y) (f2 : x -> y) (a : f1 -> f2) (z : *) (g1 : y -> z) (g2 : y -> z) (b : g1 -> g2) :
comp f1 g1 -> comp f2 g2


coh rew3@2 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                  (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (a : f2 -> g2)	
		  (x3 : *) (f3 : x2 -> x3) : 
		  comp3 f1 f2 f3 -> comp3 f1 g2 f3

coh rew3A (x0 : *) (x1 : *) (f1 : x0 -> x1) (g1 : x0 -> x1) (a : f1 -> g1)
    	       	   (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (b : f2 -> g2)
		   (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (c : f3 -> g3) :
		   comp3 f1 f2 f3 -> comp3 g1 g2 g3

coh rew5@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                  (x2 : *) (f2 : x1 -> x2)
		  (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		  (x4 : *) (f4 : x3 -> x4)
		  (x5 : *) (f5 : x4 -> x5) :
		  comp5 f1 f2 f3 f4 f5 -> comp5 f1 f2 g3 f4 f5

coh rew7@4 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3) 
		    (x4 : *) (f4 : x3 -> x4) (g4 : x3 -> x4) (a : f4 -> g4)
		    (x5 : *) (f5 : x4 -> x5) 
                    (x6 : *) (f6 : x5 -> x6) 
		    (x7 : *) (f7 : x6 -> x7)  : 
		    comp7 f1 f2 f3 f4 f5 f6 f7 -> comp7 f1 f2 f3 g4 f5 f6 f7

coh rew9@5 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3) 
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5) (g5 : x4 -> x5) (a : f5 -> g5)
                    (x6 : *) (f6 : x5 -> x6) 
		    (x7 : *) (f7 : x6 -> x7) 
		    (x8 : *) (f8 : x7 -> x8)
		    (x9 : *) (f9 : x8 -> x9) : 
		    comp9 f1 f2 f3 f4 f5 f6 f7 f8 f9 -> comp9 f1 f2 f3 f4 g5 f6 f7 f8 f9

coh rew11@6 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)
		     (x3 : *) (f3 : x2 -> x3) 
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5)
                     (x6 : *) (f6 : x5 -> x6) (g6 : x5  -> x6) (a : f6 -> g6)	
		     (x7 : *) (f7 : x6 -> x7) 
		     (x8 : *) (f8 : x7 -> x8)
		     (x9 : *) (f9 : x8 -> x9)
                     (x10 : *) (f10 : x9 -> x10)	
	     	     (x11 : *) (f11 : x10 -> x11) :
		     comp11 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 -> comp11 f1 f2 f3 f4 f5 g6 f7 f8 f9 f10 f11		   		   

coh rew13@7 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)
		     (x3 : *) (f3 : x2 -> x3) 
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5)
                     (x6 : *) (f6 : x5 -> x6) 
		     (x7 : *) (f7 : x6 -> x7) (g7 : x6  -> x7) (a : f7 -> g7)	
		     (x8 : *) (f8 : x7 -> x8)
		     (x9 : *) (f9 : x8 -> x9)
                     (x10 : *) (f10 : x9 -> x10)	
	     	     (x11 : *) (f11 : x10 -> x11)
		     (x12 : *) (f12 : x11 -> x12)
		     (x13 : *) (f13 : x12 -> x13) :
		     comp13 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 -> comp13 f1 f2 f3 f4 f5 f6 g7 f8 f9 f10 f11 f12 f13		   		   


### Coherences for rewriting a composition
# Format = rew(n)comp@(k) (n = arity, k < n, k = argument where to perform the rewriting)
#          rew(n)compA
coh rew2compA (x : *) (y : *) (f1 : x -> y)
    	      	      	       (f2 : x -> y) (a1 : f1 -> f2)
			       (f3 : x -> y) (a2 : f2 -> f3)
		       (z : *) (g1 : y -> z)
		       	       (g2 : y -> z) (b1 : g1 -> g2)
			       (g3 : y -> z) (b2 : g2 -> g3) :
	       comp (rew2A a1 b1) (rew2A a2 b2) -> rew2A (comp a1 a2) (comp b1 b2)

coh rew2compA- (x : *) (y : *) (f1 : x -> y)
    	      	      	      (f2 : x -> y) (a1 : f1 -> f2)
			      (f3 : x -> y) (a2 : f2 -> f3)
		      (z : *) (g1 : y -> z)
		      	      (g2 : y -> z) (b1 : g1 -> g2)
			      (g3 : y -> z) (b2 : g2 -> g3) :
	      rew2A (comp a1 a2) (comp b1 b2) -> comp (rew2A a1 b1) (rew2A a2 b2)

coh rew3comp@2 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (a : f2 -> g2)
		      	       	     	       (h2 : x1 -> x2) (b : g2  -> h2)
		      (x3 : *) (f3 : x2 -> x3):
		      comp (rew3@2 f1 a f3) (rew3@2 f1 b f3) -> rew3@2 f1 (comp a b) f3

coh rew3comp@2- (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (a : f2 -> g2)
		      	       	     	       (h2 : x1 -> x2) (b : g2  -> h2)
		      (x3 : *) (f3 : x2 -> x3):
		      rew3@2 f1 (comp a b) f3 -> comp (rew3@2 f1 a f3) (rew3@2 f1 b f3)

coh rew3compA (x0 : *) (x1 : *) (f1 : x0 -> x1) (g1 : x0 -> x1) (a1 : f1 -> g1)
    	      	       	     	      	        (h1 : x0 -> x1) (a2 : g1 -> h1)
                       (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (b1 : f2 -> g2)
		      	       	     	        (h2 : x1 -> x2) (b2 : g2 -> h2)
		       (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (c1 : f3 -> g3)
		       	     	      	    	(h3 : x2 -> x3) (c2 : g3 -> h3) : 
     		       comp (rew3A a1 b1 c1) (rew3A a2 b2 c2) -> rew3A (comp a1 a2) (comp b1 b2) (comp c1 c2)

coh rew5comp@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                        (x2 : *) (f2 : x1 -> x2)
		        (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		                               (h3 : x2 -> x3) (b : g3 -> h3)
		        (x4 : *) (f4 : x3 -> x4)
		        (x5 : *) (f5 : x4 -> x5) :
		        comp (rew5@3 f1 f2 a f4 f5) (rew5@3 f1 f2 b f4 f5) -> rew5@3 f1 f2 (comp a b) f4 f5

coh rew5comp@3- (x0 : *) (x1 : *) (f1 : x0 -> x1)
                         (x2 : *) (f2 : x1 -> x2)
		         (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		                                  (h3 : x2 -> x3) (b : g3 -> h3)
		         (x4 : *) (f4 : x3 -> x4)
		         (x5 : *) (f5 : x4 -> x5) :
		         rew5@3 f1 f2 (comp a b) f4 f5 -> comp (rew5@3 f1 f2 a f4 f5) (rew5@3 f1 f2 b f4 f5).

coh rew7comp@4 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                        (x2 : *) (f2 : x1 -> x2)
		        (x3 : *) (f3 : x2 -> x3)
		        (x4 : *) (f4 : x3 -> x4) (g4 : x3 -> x4) (a : f4 -> g4)
		                                 (h4 : x3 -> x4) (b : g4 -> h4)
		        (x5 : *) (f5 : x4 -> x5)
		        (x6 : *) (f6 : x5 -> x6)
		        (x7 : *) (f7 : x6 -> x7) :
		        comp (rew7@4 f1 f2 f3 a f5 f6 f7) (rew7@4 f1 f2 f3 b f5 f6 f7) ->
		        rew7@4 f1 f2 f3 (comp a b) f5 f6 f7


### Coherences for rewriting an identity
# Format = rew(n)id@(k) (n = arity, k < n, k = argument where to perform the rewriting)
#          rew(n)idA
#          rew(n)Aid@(k) (n = arity, k < n, k = argument where to rewrite by identity)
coh rew2idA (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) :
rew2A (id f) (id g) -> id (comp f g)

coh rew3id@2 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                       (x2 : *) (f2 : x1 -> x2)
	               (x3 : *) (f3 : x2 -> x3) : 
		       rew3@2 f1 (id f2) f3 -> id (comp3 f1 f2 f3)

coh rew3id@2- (x0 : *) (x1 : *) (f1 : x0 -> x1)
                       (x2 : *) (f2 : x1 -> x2)
	               (x3 : *) (f3 : x2 -> x3) : 
		       id (comp3 f1 f2 f3) -> rew3@2 f1 (id f2) f3

coh rew3idA (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	     (x2 : *) (f2 : x1 -> x2) 
		     (x3 : *) (f3 : x2 -> x3) :
		     rew3A (id f1) (id f2) (id f3) -> id (comp3 f1 f2 f3)

coh rew5id@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2)
		      (x3 : *) (f3 : x2 -> x3)
		      (x4 : *) (f4 : x3 -> x4)
		      (x5 : *) (f5 : x4 -> x5) :
		      rew5@3 f1 f2 (id f3) f4 f5 -> id (comp5 f1 f2 f3 f4 f5)

coh rew5id@3- (x0 : *) (x1 : *) (f1 : x0 -> x1)
                       (x2 : *) (f2 : x1 -> x2)
		       (x3 : *) (f3 : x2 -> x3)
		       (x4 : *) (f4 : x3 -> x4)
		       (x5 : *) (f5 : x4 -> x5) :
		       id (comp5 f1 f2 f3 f4 f5) -> rew5@3 f1 f2 (id f3) f4 f5.

coh rew7id@4 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2)
		      (x3 : *) (f3 : x2 -> x3)
		      (x4 : *) (f4 : x3 -> x4)
		      (x5 : *) (f5 : x4 -> x5)
		      (x6 : *) (f6 : x5 -> x6)
		      (x7 : *) (f7 : x6 -> x7):
		      rew7@4 f1 f2 f3 (id f4) f5 f6 f7 -> id (comp7 f1 f2 f3 f4 f5 f6 f7)

coh rew2Aid@1 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g): comp3 (id2@1- f) (rew2A (id (id x)) a) (id2@1 g) -> a 
coh rew2Aid@1- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g):  a -> comp3 (id2@1- f) (rew2A (id (id x)) a) (id2@1 g) 

coh rew2Aid@2 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g): comp3 (id2@2- f) (rew2A a (id (id y))) (id2@2 g) -> a 
coh rew2Aid@2- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g):  a -> comp3 (id2@2- f) (rew2A a (id (id y))) (id2@2 g) 

### Rewriting in a rewriting
# Format : rrew(n)@(k) (n = arity, k < n, k = where to perform the rewriting)
coh rrew2A (x : *) (y : *) (f : x -> y) (g : x -> y) (a0 : f -> g) (a1 : f -> g) (al : a0 -> a1)
    	      	   (z : *) (h : y -> z) (k : y -> z) (b0 : h -> k) (b1 : h -> k) (bet : b0 -> b1) :
		   rew2A a0 b0 -> rew2A a1 b1

coh rrew3@2 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (a : f2 -> g2)
		      	       	       	       	       	      (b : f2 -> g2) (c : a -> b)   
		     (x3 : *) (f3 : x2 -> x3) : 
		     rew3@2 f1 a f3 -> rew3@2 f1 b f3

coh rrew3A (x0 : *) (x1 : *) (f1 : x0 -> x1) (g1 : x0 -> x1) (a1 : f1 -> g1) (a2 : f1 -> g1)
    	      	       	     	      	    	      	    	(al : a1 -> a2)
                       (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (b1 : f2 -> g2) (b2 : f2 -> g2)
		       	     	      	    	      	    	(bet : b1 -> b2)
		       (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (c1 : f3 -> g3) (c2 : f3 -> g3)
		       	     	      	    	      	    	(gam : c1 -> c2) :
     		       rew3A a1 b1 c1 -> rew3A a2 b2 c2

coh rrew5@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)
		     (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		       	    	     	    	     	      (b : f3 -> g3) (c : a -> b)
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5) :
		     rew5@3 f1 f2 a f4 f5 -> rew5@3 f1 f2 b f4 f5

coh rrew7@4 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)
		     (x3 : *) (f3 : x2 -> x3)
		     (x4 : *) (f4 : x3 -> x4) (g4 : x3 -> x4) (a : f4 -> g4) (b : f4 -> g4) (r : a -> b)
		     (x5 : *) (f5 : x4 -> x5)
		     (x6 : *) (f6 : x5 -> x6)
		     (x7 : *) (f7 : x6 -> x7) :
		     rew7@4 f1 f2 f3 a f5 f6 f7 -> rew7@4 f1 f2 f3 b f5 f6 f7



### Higher coherences for rewriting inside rewritings and so on
#Format = same pattern as before
coh rrew2compA (x : *) (y : *) (f : x -> y)
    	     	     	     (g : x -> y) (a0 : f -> g)
			     	       	  (a1 : f -> g) (al1 : a0 -> a1)
					  (a2 : f -> g) (al2 : a1 -> a2)
    	      	     (z : *) (h : y -> z)
		     	     (k : y -> z) (b0 : h -> k)
			     	       	  (b1 : h -> k) (bet1 : b0 -> b1)
					  (b2 : h -> k) (bet2 : b1 -> b2) :
	     comp (rrew2A al1 bet1) (rrew2A al2 bet2) -> rrew2A (comp al1 al2) (comp bet1 bet2)

coh rrew2idA (x : *) (y : *) (f : x -> y) (g : x -> y) (a0 : f -> g) 
    	      	     (z : *) (h : y -> z) (k : y -> z) (b0 : h -> k) :
	   rrew2A (id a0) (id b0) -> id (rew2A a0 b0)


coh rrrew2A (x : *) (y : *) (f : x -> y)
                  (g : x -> y) (a0 : f -> g)
		       	       (a1 : f -> g) (al0 : a0 -> a1)
			       	       	     (al1 : a0 -> a1) (c : al0 -> al1)
    	      	  (z : *) (h : y -> z)
		       	  (k : y -> z) (b0 : h -> k)
			       	       (b1 : h -> k) (bet0 : b0 -> b1)
				       	       	     (bet1 : b0 -> b1) (d : bet0 -> bet1) :
		  rrew2A al0 bet0 -> rrew2A al1 bet1

### interchanging left and right unitors when possible 
coh id2@/1-,2-/     (x : *) :  id2@1- (id x) -> id2@2- (id x)
coh id2@/1-,2-/-    (x : *) :  id2@2- (id x) -> id2@1- (id x)

coh id2@/1,2/       (x : *) : id2@1 (id x) -> id2@2 (id x)
coh id2@/1,2/-      (x : *) : id2@2 (id x) -> id2@1 (id x)

### cancelling left and right unitors
coh id2@2@1U  (x : *) : comp (id2@2 (id x)) (id2@1- (id x)) -> id (comp (id x) (id x))
coh id2@2@1U- (x : *) : id (comp (id x) (id x)) -> comp (id2@2 (id x)) (id2@1- (id x))

coh id2@1@2U   (x : *) : comp (id2@1 (id x)) (id2@2- (id x)) -> id (comp (id x) (id x))
coh id2@1@2U-  (x : *) : id (comp (id x) (id x)) -> comp (id2@1 (id x)) (id2@2- (id x))



### DEFINITION OF TACTICS

### Some "focused" versions of cancellation lemmas
# Format = "nameF" (F = focused) : cancellation and association combined
coh id5@3F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp5 f1 f2 (id x3) f3 f4 -> comp3 f1 (comp f2 f3) f4

coh id5@3F- (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp3 f1 (comp f2 f3) f4 -> comp5 f1 f2 (id x3) f3 f4

coh id5@3FU (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp (id5@3F f1 f2 f3 f4) (id5@3F- f1 f2 f3 f4) -> id (comp5 f1 f2 (id x3) f3 f4)

coh id5@3FU- (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
id (comp5 f1 f2 (id x3) f3 f4) -> comp (id5@3F f1 f2 f3 f4) (id5@3F- f1 f2 f3 f4).

coh id5@3FCU (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp (id5@3F- f1 f2 f3 f4) (id5@3F f1 f2 f3 f4) -> id (comp3 f1 (comp f2 f3) f4)

coh id7@4F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) :
comp7 f1 f2 f3 (id x4) f4 f5 f6 -> comp5 f1 f2 (comp f3 f4) f5 f6

coh id9@5F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) :
comp9 f1 f2 f3 f4 (id x5) f5 f6 f7 f8 -> comp7 f1 f2 f3 (comp f4 f5) f6 f7 f8

coh id11@6F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10) (x11 : *) (f10 : x10 -> x11):
comp11 f1 f2 f3 f4 f5 (id x6) f6 f7 f8 f9 f10 -> comp9 f1 f2 f3 f4 (comp f5 f6) f7 f8 f9 f10

coh id13@7F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) (x10 : *) (f9 : x9 -> x10) (x11 : *) (f10 : x10 -> x11) (x12 : *) (f11 : x11 -> x12) (x13 : *) (f12 : x12 -> x13) :
comp13 f1 f2 f3 f4 f5 f6 (id x7) f7 f8 f9 f10 f11 f12 -> comp11 f1 f2 f3 f4 f5 (comp f6 f7)  f8 f9 f10 f11 f12


### Tactics for simplification
# format = simpl(n) (n = arity) : simplifies f1 f2  f(2n-1) f(2n) into identity
let simpl2 (x0 : *) (x1 : *) (x2 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x1) (f4 : x1 -> x0)
	   (s1 : comp f1 f4 -> id x0) (s2 : comp f2 f3 -> id x1) =
	   comp3 (rew3@2 f1 s2 f4)
	   	 (id3@2 f1 f4)
		 s1

let simpl2- (x0 : *) (x1 : *) (x2 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x1) (f4 : x1 -> x0)
	      (s1- : id x0 -> comp f1 f4) (s2- : id x1 -> comp f2 f3) =
	   comp3 s1-
	   	 (id3@2- f1 f4)
		 (rew3@2 f1 s2- f4)

let simpl2F (x0 : *) (x1 : *) (x2 : *)
    	    (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x1) (f4 : x1 -> x0)
	    (s1 : comp f1 f4 -> id x0) (s2 : comp f2 f3 -> id x1) =
	    comp (focus2 f1 f2 f3 f4)
	    	 (simpl2 s1 s2)

let simpl2F- (x0 : *) (x1 : *) (x2 : *)
    	      (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x1) (f4 : x1 -> x0)
	      (s1- : id x0 -> comp f1 f4) (s2- : id x1 -> comp f2 f3) =
	      comp (simpl2- s1- s2-)
	      	   (focus2- f1 f2 f3 f4)

let simpl3 (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3)
	   (f4 : x3 -> x2) (f5 : x2 -> x1) (f6 : x1 -> x0)
	   (s1 : comp f1 f6 -> id x0) (s2 : comp f2 f5 -> id x1) (s3 : comp f3 f4 -> id x2) =
	   comp3 (rew5@3 f1 f2 s3 f5 f6)
	   	 (id5@3F f1 f2 f5 f6)
		 (simpl2 s1 s2)

let simpl3- (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3)
	   (f4 : x3 -> x2) (f5 : x2 -> x1) (f6 : x1 -> x0)
	   (s1- : id x0 -> comp f1 f6) (s2- : id x1 -> comp f2 f5) (s3- : id x2 -> comp f3 f4) =
	   comp3  (simpl2- s1- s2-)
	   	  (id5@3F- f1 f2 f5 f6)
		  (rew5@3 f1 f2 s3- f5 f6)

let simpl3F (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3)
	   (f4 : x3 -> x2) (f5 : x2 -> x1) (f6 : x1 -> x0)
	   (s1 : comp f1 f6 -> id x0) (s2 : comp f2 f5 -> id x1) (s3 : comp f3 f4 -> id x2) =
	   comp (focus3 f1 f2 f3 f4 f5 f6)
	   	(simpl3 s1 s2 s3)

let simpl3F- (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3)
	   (f4 : x3 -> x2) (f5 : x2 -> x1) (f6 : x1 -> x0)
	   (s1- : id x0 -> comp f1 f6) (s2- : id x1 -> comp f2 f5) (s3- : id x2 -> comp f3 f4) =
	   comp (simpl3- s1- s2- s3-)
	   	(focus3- f1 f2 f3 f4 f5 f6)

let simpl4 (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4)
	   (f5 : x4 -> x3) (f6 : x3 -> x2) (f7 : x2 -> x1) (f8 : x1 -> x0)
	   (s1 : comp f1 f8 -> id x0) (s2 : comp f2 f7 -> id x1)
	   (s3 : comp f3 f6 -> id x2) (s4 : comp f4 f5 -> id x3) =
	   comp3 (rew7@4 f1 f2 f3 s4 f6 f7 f8)
	   	 (id7@4F f1 f2 f3 f6 f7 f8)
		 (simpl3 s1 s2 s3)

let simpl5 (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4) (f5 : x4 -> x5)
	   (f6 : x5 -> x4) (f7 : x4 -> x3) (f8 : x3 -> x2) (f9 : x2 -> x1) (f10 : x1 -> x0)
	   (s1 : comp f1 f10 -> id x0) (s2 : comp f2 f9 -> id x1)
	   (s3 : comp f3 f8 -> id x2) (s4 : comp f4 f7 -> id x3)
	   (s5 : comp f5 f6 -> id x4) =
	   comp3 (rew9@5 f1 f2 f3 f4 s5 f7 f8 f9 f10)
	   	 (id9@5F f1 f2 f3 f4 f7 f8 f9 f10)
		 (simpl4 s1 s2 s3 s4)

let simpl5F (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *)
    	    (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4) (f5 : x4 -> x5)
	    (f6 : x5 -> x4) (f7 : x4 -> x3) (f8 : x3 -> x2) (f9 : x2 -> x1) (f10 : x1 -> x0)
	    (s1 : comp f1 f10 -> id x0) (s2 : comp f2 f9 -> id x1)
	    (s3 : comp f3 f8 -> id x2) (s4 : comp f4 f7 -> id x3)
	    (s5 : comp f5 f6 -> id x4) =
	    comp (focus5 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10)
	   	 (simpl5 s1 s2 s3 s4 s5)

let simpl6 (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *) (x6 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4) (f5 : x4 -> x5)
	       	       	   (f6 : x5 -> x6)
	   (f7 : x6 -> x5) (f8 : x5 -> x4) (f9 : x4 -> x3) (f10 : x3 -> x2) (f11 : x2 -> x1)
	       	       	   (f12 : x1 -> x0)
	   (s1 : comp f1 f12 -> id x0) (s2 : comp f2 f11 -> id x1)
	   (s3 : comp f3 f10 -> id x2) (s4 : comp f4 f9 -> id x3)
	   (s5 : comp f5 f8 -> id x4)  (s6 : comp f6 f7 -> id x5) =
	   comp3 (rew11@6 f1 f2 f3 f4 f5 s6 f8 f9 f10 f11 f12)
	   	 (id11@6F f1 f2 f3 f4 f5 f8 f9 f10 f11 f12)
		 (simpl5 s1 s2 s3 s4 s5)

let simpl6F (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *) (x6 : *)
    	    (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4) (f5 : x4 -> x5)
	       	       	    (f6 : x5 -> x6)
            (f7 : x6 -> x5) (f8 : x5 -> x4) (f9 : x4 -> x3) (f10 : x3 -> x2) (f11 : x2 -> x1)
	       	       	    (f12 : x1 -> x0)
	    (s1 : comp f1 f12 -> id x0) (s2 : comp f2 f11 -> id x1)
	    (s3 : comp f3 f10 -> id x2) (s4 : comp f4 f9 -> id x3)
	    (s5 : comp f5 f8 -> id x4)  (s6 : comp f6 f7 -> id x5) =
	    comp (focus6 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12)
	    	 (simpl6 s1 s2 s3 s4 s5 s6)

let simpl7 (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *) (x6 : *) (x7 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4) (f5 : x4 -> x5)
	       	       	   (f6 : x5 -> x6) (f7 : x6 -> x7)
	   (f8 : x7 -> x6) (f9 : x6 -> x5) (f10 : x5 -> x4) (f11 : x4 -> x3) (f12 : x3 -> x2)
	       	       	   (f13 : x2 -> x1)(f14 : x1 -> x0)
	   (s1 : comp f1 f14 -> id x0) (s2 : comp f2 f13 -> id x1)
	   (s3 : comp f3 f12 -> id x2) (s4 : comp f4 f11 -> id x3)
	   (s5 : comp f5 f10 -> id x4)  (s6 : comp f6 f9 -> id x5)
	   (s7 : comp f7 f8 -> id x6) =
	   comp3 (rew13@7 f1 f2 f3 f4 f5 f6 s7 f9 f10 f11 f12 f13 f14)
	   	 (id13@7F f1 f2 f3 f4 f5 f6 f9 f10 f11 f12 f13 f14)
		 (simpl6 s1 s2 s3 s4 s5 s6)

let simpl7F (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *) (x6 : *) (x7 : *)
    	    (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4) (f5 : x4 -> x5)
	       	       	    (f6 : x5 -> x6) (f7 : x6 -> x7)
	    (f8 : x7 -> x6) (f9 : x6 -> x5) (f10 : x5 -> x4) (f11 : x4 -> x3) (f12 : x3 -> x2)
	       	       	    (f13 : x2 -> x1)(f14 : x1 -> x0)
	    (s1 : comp f1 f14 -> id x0) (s2 : comp f2 f13 -> id x1)
	    (s3 : comp f3 f12 -> id x2) (s4 : comp f4 f11 -> id x3)
	    (s5 : comp f5 f10 -> id x4)  (s6 : comp f6 f9 -> id x5)
	    (s7 : comp f7 f8 -> id x6) =
	    comp (focus7 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14) 
		 (simpl7 s1 s2 s3 s4 s5 s6 s7)

### Tactics to simplify rewriting
# simplifies any rewriting by a cell then its inverse into the identity
let simplrew2A (x : *) (y : *) (z : *)
    	       (f1 : x -> y) (f2 : x -> y) (g1 : y -> z) (g2 : y -> z)
	       (a1 : f1 -> f2) (a2 : f2 -> f1) (b1 : g1 -> g2) (b2 : g2 -> g1)
	       (aU : comp a1 a2 -> id f1) (bU : comp b1 b2 -> id g1) =
	       comp3 (rew2compA a1 a2 b1 b2)
	       	     (rrew2A aU bU)
		     (rew2idA f1 g1)

let simplrew3 (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	      (f1 : x0 -> x1) (f2 : x1 -> x2) (g2 : x1 -> x2) (f3 : x2 -> x3)
	      (a : f2 -> g2) (b : g2 -> f2)
	      (abU : comp a b -> id f2) =
comp3 (rew3comp@2 f1 a b f3)
      (rrew3@2 f1 abU f3)
      (rew3id@2 f1 f2 f3)

let simplrew3-@2 (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	         (f1 : x0 -> x1) (f2 : x1 -> x2) (g2 : x1 -> x2) (f3 : x2 -> x3)
	         (a : f2 -> g2) (b : g2 -> f2)
	         (abU- : id f2 -> comp a b) =
comp3 (rew3id@2- f1 f2 f3)
      (rrew3@2 f1 abU- f3)
      (rew3comp@2- f1 a b f3)

let simplrew3A (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	       (f1 : x0 -> x1) (g1 : x0 -> x1) (f2 : x1 -> x2) (g2 : x1 -> x2)
	       	     	       	     	       (f3 : x2 -> x3) (g3 : x2 -> x3)
	       (a1 : f1 -> g1) (a2 : g1 -> f1) (b1 : f2 -> g2) (b2 : g2 -> f2)
	       	     	       	     	       (c1 : f3 -> g3) (c2 : g3 -> f3)
	       (aU : comp a1 a2 -> id f1) (bU : comp b1 b2 -> id f2) (cU : comp c1 c2 -> id f3) =
comp3 (rew3compA a1 a2 b1 b2 c1 c2)
      (rrew3A aU bU cU)
      (rew3idA f1 f2 f3)

let simplrew5 (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *)
    	      (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (g3 : x2 -> x3) (f4 : x3 -> x4) (f5 : x4 -> x5) 
	      (a : f3 -> g3) (b : g3 -> f3)
	      (abU : comp a b -> id f3) =
comp3 (rew5comp@3 f1 f2 a b f4 f5)
      (rrew5@3 f1 f2 abU f4 f5)
      (rew5id@3 f1 f2 f3 f4 f5)

let simplrew5- (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *)
    	       (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (g3 : x2 -> x3) (f4 : x3 -> x4) (f5 : x4 -> x5) 
	       (a : f3 -> g3) (b : g3 -> f3)
	       (abU : id f3 -> comp a b) =
comp3 (rew5id@3- f1 f2 f3 f4 f5)
      (rrew5@3 f1 f2 abU f4 f5)
      (rew5comp@3- f1 f2 a b f4 f5).

let simplrew7 (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *) (x6 : *) (x7 : *)
    	      (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4) (g4 : x3 -> x4) (f5 : x4 -> x5) (f6 : x5 -> x6) (f7 : x6 -> x7)
	      (a : f4 -> g4) (b : g4 -> f4)
	      (abU : comp a b -> id f4) =
comp3 (rew7comp@4 f1 f2 f3 a b f5 f6 f7)
      (rrew7@4 f1 f2 f3 abU f5 f6 f7)
      (rew7id@4 f1 f2 f3 f4 f5 f6 f7)

let simplrrew (x : *) (y : *) (z : *)
    	      (f : x -> y) (g : x -> y) (h : y -> z) (k : y -> z)
	      (a1 : f -> g) (a2 : f -> g) (b1 : h -> k) (b2 : h -> k)
	      (s1 : a1 -> a2) (s2 : a2 -> a1) (r1 : b1 -> b2) (r2 : b2 -> b1)
	      (sU : comp s1 s2 -> id a1) (rU : comp r1 r2 -> id b1) =
comp3 (rrew2compA s1 s2 r1 r2)
      (rrrew2A sU rU)
      (rrew2idA a1 b1)

### Tactics for reducing
# simplifies a composition f1 f2  f(2n-1) f(2n) into a smaller composition when some intermediate cells cancel
let red2 (x0 : *) (x1 : *) (x2 : *)
    	 (f1 : x0 -> x1)
	 (f2 : x1 -> x2) (f3 : x2 -> x1) (s : comp f2 f3 -> id x1)
	 (f4 : x1 -> x0) =
	 comp (rew3@2 f1 s f4)
	      (id3@2 f1 f4)

let red2- (x0 : *) (x1 : *) (x2 : *)
    	  (f1 : x0 -> x1)
	  (f2 : x1 -> x2) (f3 : x2 -> x1) (s- : id x1 -> comp f2 f3)
	  (f4 : x1 -> x0) =
	  comp (id3@2- f1 f4)    
     	       (rew3@2 f1 s- f4)

let red2F (x0 : *) (x1 : *) (x2 : *)
    	  (f1 : x0 -> x1) 
	  (f2 : x1 -> x2) (f3 : x2 -> x1) (s : comp f2 f3 -> id x1)
	  (f4 : x1 -> x0) =
	  comp (focus2 f1 f2 f3 f4)
	       (red2 f1 s f4)

let red2F- (x0 : *) (x1 : *) (x2 : *)
    	   (f1 : x0 -> x1)
	   (f2 : x1 -> x2) (f3 : x2 -> x1) (s- : id x1 -> comp f2 f3)
	   (f4 : x1 -> x0) =
	   comp (red2- f1 s- f4)
	        (focus2- f1 f2 f3 f4)

let red3 (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	 (f1 : x0 -> x1) (f2 : x1 -> x2)
	 (f3 : x2 -> x3) (f4 : x3 -> x2) (s : comp f3 f4 -> id x2)
	 (f5 : x2 -> x1) (f6 : x1 -> x0) =
	 comp (rew5@3 f1 f2 s f5 f6)
	      (id5@3F f1 f2 f5 f6)

let red3- (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	  (f1 : x0 -> x1) (f2 : x1 -> x2)
	  (f3 : x2 -> x3) (f4 : x3 -> x2) (s : id x2 -> comp f3 f4)
	  (f5 : x2 -> x1) (f6 : x1 -> x0) =
	  comp (id5@3F- f1 f2 f5 f6)    
     	       (rew5@3 f1 f2 s f5 f6)

let red3F (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	  (f1 : x0 -> x1) (f2 : x1 -> x2)
	  (f3 : x2 -> x3) (f4 : x3 -> x2) (s : comp f3 f4 -> id x2)
	  (f5 : x2 -> x1) (f6 : x1 -> x0) =
	  comp (focus3 f1 f2 f3 f4 f5 f6)
	       (red3 f1 f2 s f5 f6)

let red3F- (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2)
	   (f3 : x2 -> x3) (f4 : x3 -> x2) (s : id x2 -> comp f3 f4)
	   (f5 : x2 -> x1) (f6 : x1 -> x0) =
	   comp (red3- f1 f2 s f5 f6)
	        (focus3- f1 f2 f3 f4 f5 f6)

let red3U (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	  (f1 : x0 -> x1) (f2 : x1 -> x2)
	  (f3 : x2 -> x3) (f4 : x3 -> x2) (s1 : comp f3 f4 -> id x2) (s2 : id x2 -> comp f3 f4)
	  (sU : comp s1 s2 -> id (comp f3 f4))
	  (f5 : x2 -> x1) (f6 : x1 -> x0) :
comp (red3 f1 f2 s1 f5 f6) (red3- f1 f2 s2 f5 f6) -> id (comp5 f1 f2 (comp f3 f4) f5 f6) =
simpl2F (simplrew5 f1 f2 f5 f6 sU)
	(id5@3FU f1 f2 f5 f6)

let red3U- (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	  (f1 : x0 -> x1) (f2 : x1 -> x2)
	  (f3 : x2 -> x3) (f4 : x3 -> x2) (s1 : comp f3 f4 -> id x2) (s2 : id x2 -> comp f3 f4)
	  (sU : id (comp f3 f4) -> comp s1 s2)
	  (f5 : x2 -> x1) (f6 : x1 -> x0) :
id (comp5 f1 f2 (comp f3 f4) f5 f6) -> comp (red3 f1 f2 s1 f5 f6) (red3- f1 f2 s2 f5 f6) =
simpl2F- (simplrew5- f1 f2 f5 f6 sU)
	 (id5@3FU- f1 f2 f5 f6).

let red3FU (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2)
	   (f3 : x2 -> x3) (f4 : x3 -> x2) (s1 : comp f3 f4 -> id x2) (s2 : id x2 -> comp f3 f4)
	   (sU : comp s1 s2 -> id (comp f3 f4))
	   (f5 : x2 -> x1) (f6 : x1 -> x0) :
comp (red3F f1 f2 s1 f5 f6) (red3F- f1 f2 s2 f5 f6) -> id (comp (comp3 f1 f2 f3) (comp3 f4 f5 f6)) =
simpl2F (focus3U f1 f2 f3 f4 f5 f6)
	(red3U f1 f2 sU f5 f6)

let red3FU- (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	    (f1 : x0 -> x1) (f2 : x1 -> x2)
	    (f3 : x2 -> x3) (f4 : x3 -> x2) (s1 : comp f3 f4 -> id x2) (s2 : id x2 -> comp f3 f4)
	    (sU : id (comp f3 f4) -> comp s1 s2)
	    (f5 : x2 -> x1) (f6 : x1 -> x0) :
id (comp (comp3 f1 f2 f3) (comp3 f4 f5 f6)) -> comp (red3F f1 f2 s1 f5 f6) (red3F- f1 f2 s2 f5 f6)=
simpl2F- (focus3U- f1 f2 f3 f4 f5 f6)
	 (red3U- f1 f2 sU f5 f6).

let red3CU (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2)
	   (f3 : x2 -> x3) (f4 : x3 -> x2)  (s1 : id x2 -> comp f3 f4) (s2 : comp f3 f4 -> id x2)  
	   (sU : comp s1 s2 -> id (id x2))
	   (f5 : x2 -> x1) (f6 : x1 -> x0) :
comp (red3- f1 f2 s1 f5 f6) (red3 f1 f2 s2 f5 f6) -> id (comp3 f1 (comp f2 f5) f6)  =
simpl2F (id5@3FCU f1 f2 f5 f6)
	(simplrew5 f1 f2 f5 f6 sU)

let red3FCU(x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	     (f1 : x0 -> x1) (f2 : x1 -> x2)
	     (f3 : x2 -> x3) (f4 : x3 -> x2)  (s1 : id x2 -> comp f3 f4) (s2 : comp f3 f4 -> id x2)  
	     (sU : comp s1 s2 -> id (id x2))
	     (f5 : x2 -> x1) (f6 : x1 -> x0) :
comp (red3F- f1 f2 s1 f5 f6) (red3F f1 f2 s2 f5 f6) -> id (comp3 f1 (comp f2 f5) f6)  =
simpl2F (red3CU f1 f2 sU f5 f6)
	(focus3CU f1 f2 f3 f4 f5 f6)

### Some operations on 2-cells
# Format = rew(n)@(k)id@(l)R :substituting id in the place l in the coherence rew(n)@(k), and rewriting the source and target to match with the orginal two cell
#                            (R = reduced)
#          rew(n)@(k)id@(l)  :unitor for the substitution of id in the place l in the coherence rew(n)@(k)  
let rew2@2id@1R (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) =
    comp3 (id2@1- f) (rew2@2 (id x) a) (id2@1 g)

coh rew2@2id@1 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    rew2@2id@1R a -> a

coh rew2@2id@1- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    a -> rew2@2id@1R a

coh rew@2id@1U (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    comp (rew2@2id@1 a) (rew2@2id@1- a) -> id (rew2@2id@1R a)

coh rew2id@1CU (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    comp (rew2@2id@1- a) (rew2@2id@1 a) -> id a

let rew2@1id@2R (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) =
    comp3 (id2@2- f) (rew2@1 a (id y)) (id2@2 g)

coh rew2@1id@2 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    rew2@1id@2R a -> a

coh rew2@1id@2- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    a -> rew2@1id@2R a

coh rew2@1id@2U (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    comp (rew2@1id@2 a) (rew2@1id@2- a) -> id (rew2@1id@2R a)

coh rew2@1id@2CU (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    comp (rew2@1id@2- a) (rew2@1id@2 a) -> id a

# Format = exch : exchange rule
coh exch (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
    	      	 (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
		 comp (rew2@1 a h) (rew2@2 g b) -> comp (rew2@2 f b) (rew2@1 a k)

coh exch- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
    	      	  (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
		  comp (rew2@2 f b) (rew2@1 a k) -> comp (rew2@1 a h) (rew2@2 g b)

coh exchU (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
    	      	  (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
comp (exch a b) (exch- a b) -> id (comp (rew2@1 a h) (rew2@2 g b))

### Eckmann-Hilton morphism, inverse and cancellation
let eh (x : *) (a : id x -> id x) (b : id x  -> id x) =
    comp5 (rew2A (rew2@1id@2- a) (rew2@2id@1- b))
	  (red3F (id2@2- (id x)) (rew2@1 a (id x)) (id2@2@1U x) (rew2@2 (id x) b) (id2@1 (id x)))
	  (rew3A (id2@/1-,2-/- x) (exch a b) (id2@/1,2/ x))
	  (red3F- (id2@1- (id x)) (rew2@2 (id x) b) (id2@1@2U- x) (rew2@1 a (id x)) (id2@2 (id x)))
	  (rew2A (rew2@2id@1 b) (rew2@1id@2 a))

let eh- (x : *) (a : id x -> id x) (b : id x  -> id x) =
    comp5 (rew2A (rew2@2id@1- a) (rew2@1id@2- b))
	  (red3F (id2@1- (id x)) (rew2@2 (id x) a) (id2@1@2U x) (rew2@1 b (id x)) (id2@2 (id x)))
	  (rew3A (id2@/1-,2-/ x) (exch- b a) (id2@/1,2/- x))
	  (red3F- (id2@2- (id x)) (rew2@1 b (id x)) (id2@2@1U- x) (rew2@2 (id x) a) (id2@1 (id x)))
	  (rew2A (rew2@1id@2 b) (rew2@2id@1 a))


### Higher Cells for cancelling Eckmann-Hilton morphism with its inverse
# coh rew2@1id@2U (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
#     comp (rew2@1id@2 a) (rew2@1id@2- a) -> id (rew2@1id@2R a)
# coh rew2@1id@2CU (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
#     comp (rew2@1id@2- a) (rew2@1id@2 a) -> id a

# coh rew2@2id@1U (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
#     comp (rew2@2id@1 a) (rew2@2id@1- a) -> id (rew2@2id@1R a)
# coh rew2@2id@1CU (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
#     comp (rew2@2id@1- a) (rew2@2id@1 a) -> id a

# coh id2@1@2UU  (x : *) : comp (id2@1@2U x) (id2@1@2U- x) -> id (comp (id2@1 (id x))(id2@2- (id x)))
# coh id2@1@2UCU (x: *) : comp (id2@1@2U- x) (id2@1@2U x) -> id (id (comp (id x) (id x)))

coh id2@2@1UU (x: *) : comp (id2@2@1U x) (id2@2@1U- x) -> id (comp (id2@2 (id x)) (id2@1- (id x))).
coh id2@2@1UU- (x: *) : id (comp (id2@2 (id x)) (id2@1- (id x))) -> comp (id2@2@1U x) (id2@2@1U- x).
# coh id2@2@1UCU (x: *) : comp (id2@2@1U- x) (id2@2@1U x) -> id (id (comp (id x) (id x))).

# coh id2@/1-,2-/U    (x : *) : comp (id2@/1-,2-/ x) (id2@/1-,2-/- x) ->  id (id2@1- (id x))
# coh id2@/1-,2-/U-   (x : *) : id (id2@1- (id x)) -> comp (id2@/1-,2-/ x) (id2@/1-,2-/- x)
# coh id2@/1-,2-/CU   (x : *) : comp (id2@/1-,2-/- x) (id2@/1-,2-/ x) ->  id (id2@2- (id x))
# coh id2@/1-,2-/CU-  (x : *) : id (id2@2- (id x)) -> comp (id2@/1-,2-/- x) (id2@/1-,2-/ x)

# coh id2@/1,2/U      (x : *) : comp (id2@/1,2/ x) (id2@/1,2/- x) -> (id (id2@1 (id x)))
# coh id2@/1,2/U-     (x : *) : (id (id2@1 (id x))) -> comp (id2@/1,2/ x) (id2@/1,2/- x)
# coh id2@/1,2/CU     (x : *) : comp (id2@/1,2/- x) (id2@/1,2/ x) -> (id (id2@2 (id x)))
# coh id2@/1,2/CU-    (x : *) : (id (id2@2 (id x))) -> comp (id2@/1,2/- x) (id2@/1,2/ x)

# let ehU (x : *) (a : id x -> id x) (b : id x  -> id x) :
# comp (eh a b) (eh- b a) -> id (comp a b) =
# simpl5F (simplrew2A (rew2@1id@2CU a) (rew2@2id@1CU b))
# 	(red3FU (id2@2- (id x)) (rew2@1 a (id x)) (id2@2@1UU x) (rew2@2 (id x) b) (id2@1 (id x)))
# 	(simplrew3A (id2@/1-,2-/CU x) (exchU a b) (id2@/1,2/U x))
# 	(red3FCU (id2@1- (id x)) (rew2@2 (id x) b) (id2@1@2UCU x) (rew2@1 a (id x)) (id2@2 (id x)))
# 	(simplrew2A (rew2@2id@1U b) (rew2@1id@2U a))


### Other reducts lemmas useful for syllpesis
coh rew5@1,3,5 (x0 : *) (x1 : *) (f1 : x0 -> x1) (g1 : x0 -> x1) (a1 : f1 -> g1)
    	       	     	(x2 : *) (f2 : x1 -> x2)
			(x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a3 : f3 -> g3)
			(x4 : *) (f4 : x3 -> x4) 
			(x5 : *) (f5 : x4 -> x5) (g5 : x4 -> x5) (a5 : f5 -> g5) :
	comp5 f1 f2 f3 f4 f5 -> comp5 g1 f2 g3 f4 g5.

coh id5@1,3,5 (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	       (x2 : *) (f2 : x1 -> x2) :
	comp5 (id x0) f1 (id x1) f2 (id x2) -> comp f1 f2.

coh id5@1,3,5- (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	       (x2 : *) (f2 : x1 -> x2) :
	comp f1 f2 -> comp5 (id x0) f1 (id x1) f2 (id x2).

coh assoc2+1+2+1+2  (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	  	    	     (x2 : *) (f2 : x1 -> x2)
			     (x3 : *) (f3 : x2 -> x3)
			     (x4 : *) (f4 : x3 -> x4)
			     (x5 : *) (f5 : x4 -> x5)
			     (x6 : *) (f6 : x5 -> x6)
			     (x7 : *) (f7 : x6 -> x7)
			     (x8 : *) (f8 : x7 -> x8) :
	comp4 f1 (comp3 f2 f3 f4) (comp3 f5 f6 f7) f8 -> comp5 (comp f1 f2) f3 (comp f4 f5) f6 (comp f7 f8).

coh assoc2+1+2+1+2- (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	  	    	     (x2 : *) (f2 : x1 -> x2)
			     (x3 : *) (f3 : x2 -> x3)
			     (x4 : *) (f4 : x3 -> x4)
			     (x5 : *) (f5 : x4 -> x5)
			     (x6 : *) (f6 : x5 -> x6)
			     (x7 : *) (f7 : x6 -> x7)
			     (x8 : *) (f8 : x7 -> x8) :
	comp5 (comp f1 f2) f3 (comp f4 f5) f6 (comp f7 f8) -> comp4 f1 (comp3 f2 f3 f4) (comp3 f5 f6 f7) f8.


let red0+1+1+0 (x0 : *) (xl : *) (x1 : *) (x2 : *) (xr : *) (x3 : *) 
    	       (f1 : x0 -> xl) (f2 : xl -> x0) (sl : comp f1 f2 -> id x0)
	       (f3 : x0 -> x1)
	       (f4 : x1 -> x2) (f5 : x2 -> x1) (s : comp f4 f5 -> id x1)
	       (f6 : x1 -> x3)
	       (f7 : x3 -> xr) (f8 : xr -> x3) (sr : comp f7 f8 -> id x3)=
	       comp (rew5@1,3,5 sl f3 s f6 sr)
	       	    (id5@1,3,5 f3 f6).

let red0+1+1+0- (x0 : *) (xl : *) (x1 : *) (x2 : *) (xr : *) (x3 : *) 
    	        (f1 : x0 -> xl) (f2 : xl -> x0) (sl- : id x0 -> comp f1 f2)
	        (f3 : x0 -> x1)
	        (f4 : x1 -> x2) (f5 : x2 -> x1) (s- : id x1 -> comp f4 f5)
	        (f6 : x1 -> x3)
	        (f7 : x3 -> xr) (f8 : xr -> x3) (sr- : id x3 -> comp f7 f8)=
	        comp (id5@1,3,5- f3 f6)
	       	     (rew5@1,3,5 sl- f3 s- f6 sr-).

let red0+1+1+0F (x0 : *) (xl : *) (x1 : *) (x2 : *) (xr : *) (x3 : *) 
    	        (f1 : x0 -> xl) (f2 : xl -> x0) (sl : comp f1 f2 -> id x0)
	        (f3 : x0 -> x1)
	        (f4 : x1 -> x2) (f5 : x2 -> x1) (s : comp f4 f5 -> id x1)
	        (f6 : x1 -> x3)
	        (f7 : x3 -> xr) (f8 : xr -> x3) (sr : comp f7 f8 -> id x3)=
	        comp (assoc2+1+2+1+2 f1 f2 f3 f4 f5 f6 f7 f8)
	       	     (red0+1+1+0 sl f3 s f6 sr).

let red0+1+1+0F- (x0 : *) (xl : *) (x1 : *) (x2 : *) (xr : *) (x3 : *) 
    	         (f1 : x0 -> xl) (f2 : xl -> x0) (sl- : id x0 -> comp f1 f2)
	         (f3 : x0 -> x1)
	         (f4 : x1 -> x2) (f5 : x2 -> x1) (s- : id x1 -> comp f4 f5)
	         (f6 : x1 -> x3)
	         (f7 : x3 -> xr) (f8 : xr -> x3) (sr- : id x3 -> comp f7 f8)=
	         comp (red0+1+1+0- sl- f3 s- f6 sr-)
		      (assoc2+1+2+1+2- f1 f2 f3 f4 f5 f6 f7 f8).

### Formalisation of the syllepsis
coh rrew2@1 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b) 
    	     	    (z : *) (h : y -> z) :
	rew2@1 a h -> rew2@1 b h	

let rrew2@1id@2R (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b) =
        comp3 (rew2@1id@2- a) (rew3@2 (id2@2- f) (rrew2@1 r (id y)) (id2@2 g)) (rew2@1id@2 b)

coh rrew2@1id@2 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b) :
        rrew2@1id@2R r -> r

coh rrew2@1id@2- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b) :
        r -> rrew2@1id@2R r

coh rrew2@2 (x : *) (y : *) (f : x -> y)
    	       	    (z : *) (g : y -> z) (h : y -> z) (a : g -> h) (b : g -> h) (r : a -> b) :
	rew2@2 f a -> rew2@2 f b

let rrew2@2id@1R (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b) =
        comp3 (rew2@2id@1- a) (rew3@2 (id2@1- f) (rrew2@2 (id x) r) (id2@1 g)) (rew2@2id@1 b)

coh rrew2@2id@1 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b) :
    	rrew2@2id@1R r -> r

coh rrew2@2id@1- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b) :
    	r -> rrew2@2id@1R r


######### 

let test (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b) 
    	      	      	      	      (h : x -> y) (c : g -> h) (d : g -> h) (s : c -> d) =
	rew2A (rrew2@1 (rrew2@1id@2- r) c) (rrew2@2 b (rrew2@2id@1- s))

coh bla (x: *) (y : *) (f0 : x -> y) (f1 : x -> y) (a1 : f0 -> f1)
    	       	       	       	     (f2 : x -> y) (a2 : f1 -> f2)
				     (f3 : x -> y) (a3 : f2 -> f3)
	       (z : *) (g0 : y -> z) (g1 : y -> z) (b1 : g0 -> g1)
	       	       	       	     (g2 : y -> z) (b2 : g1 -> g2)
				     (g3 : y -> z) (b3 : g2 -> g3) :
	comp (rew2@1 (comp3 a1 a2 a3) g0) (rew2@2 f3 (comp3 b1 b2 b3)) -> comp3 (rew2A a1 b1) (comp (rew2@1 a2 g1) (rew2@2 f2 b2)) (rew2A a3 b3)

let inside (x : *) (a : id x -> id x) (b : id x -> id x) (r : a -> b)
    	      	   (c : id x -> id x) (d : id x -> id x) (s : c -> d) =
 	(red0+1+1+0F- (red3FU- (id2@2- (id x)) (rew2@1 a (id x)) (id2@2@1UU- x) (rew2@2 (id x) c) (id2@1 (id x)))
		      (rew2@1 (rew3@2 (id2@2- (id x)) (rrew2@1 r (id x)) (id2@2 (id x))) (rew2@2id@1R c))
	              (red3FU- (id2@2- (id x)) (rew2@1 b (id x)) (id2@2@1UU- x) (rew2@2 (id x) c) (id2@1 (id x)))
	              (rew2@2 (rew2@1id@2R b) (rew3@2 (id2@1- (id x)) (rrew2@2 (id x) s) (id2@1 (id x))))
		      (red3FU- (id2@2- (id x)) (rew2@1 b (id x)) (id2@2@1UU- x) (rew2@2 (id x) d) (id2@1 (id x)))).				      

# let test (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b) 
#     	      	      	      	      (h : x -> y) (c : g -> h) (d : g -> h) (s : c -> d) =
#     let left = (rew2A  (rew2@1id@2- a) (rew2@2id@1- c)) in
#     let right = (rew2A (rew2@1id@2 b)  (rew2@2id@1 d)) in
#     comp3 (rew2A (rrew2@1 (rrew2@1id@2- r) c) (rrew2@2 b (rrew2@2id@1- s)))
# 	  (bla (rew2@1id@2- a) (rew3@2 (id2@2- f) (rrew2@1 r (id y)) (id2@2 g)) (rew2@1id@2 b) (rew2@2id@1- c) (rew3@2 (id2@1- g) (rrew2@2 (id x) s) (id2@1 h)) (rew2@2id@1 d))
# 	  (rew3@2 left (inside r s) right).



let bug (x : *) = y


### Specific notations for the proof of syllepsis
coh rrewUL (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
    	     	   (z : *) (h : y -> z) (k : y -> z) (c : h -> k) :
	comp (rew2@1 a h) (rew2@2 g c) -> comp (rew2@1 b h) (rew2@2 g c)


let a (x : *) (a : id x -> id x) (b : id x -> id x) (r : a -> b) 
    	      (c : id x -> id x) = 
(comp3 (comp (comp (id5@3F- (id2@2- (id x)) (rew2@1 a (id x)) (rew2@2 (id x) c) (id2@1 (id x))) (rew5@3 (id2@2- (id x)) (rew2@1 a (id x)) (id2@2@1U- x) (rew2@2 (id x) c) (id2@1 (id x)))) (focus3- (id2@2- (id x)) (rew2@1 a (id x)) (id2@2 (id x)) (id2@1- (id x)) (rew2@2 (id x) c) (id2@1 (id x)))) (rew2@1 (rew3@2 (id2@2- (id x)) (rrew2@1 r (id x)) (id2@2 (id x))) (comp3 (id2@1- (id x)) (rew2@2 (id x) c) (id2@1 (id x)))) (comp (focus3 (id2@2- (id x)) (rew2@1 b (id x)) (id2@2 (id x)) (id2@1- (id x)) (rew2@2 (id x) c) (id2@1 (id x))) (comp (rew5@3 (id2@2- (id x)) (rew2@1 b (id x)) (id2@2@1U x) (rew2@2 (id x) c) (id2@1 (id x))) (id5@3F (id2@2- (id x)) (rew2@1 b (id x)) (rew2@2 (id x) c) (id2@1 (id x)))))).

let a (x : *) (a : id x -> id x) (b : id x -> id x) (r : a -> b) 
    	      	      	      	 (c : id x -> id x) = 
rew3@2 (id2@2- (id x)) (rrewUL r c) (id2@1 (id x)).
      
coh a  (x : *) (a : id x -> id x) (b : id x -> id x) (r : a -> b) 
    	       (c : id x -> id x) : 
(comp3 (comp (comp (id5@3F- (id2@2- (id x)) (rew2@1 a (id x)) (rew2@2 (id x) c) (id2@1 (id x))) (rew5@3 (id2@2- (id x)) (rew2@1 a (id x)) (id2@2@1U- x) (rew2@2 (id x) c) (id2@1 (id x)))) (focus3- (id2@2- (id x)) (rew2@1 a (id x)) (id2@2 (id x)) (id2@1- (id x)) (rew2@2 (id x) c) (id2@1 (id x)))) (rew2@1 (rew3@2 (id2@2- (id x)) (rrew2@1 r (id x)) (id2@2 (id x))) (comp3 (id2@1- (id x)) (rew2@2 (id x) c) (id2@1 (id x)))) (comp (focus3 (id2@2- (id x)) (rew2@1 b (id x)) (id2@2 (id x)) (id2@1- (id x)) (rew2@2 (id x) c) (id2@1 (id x))) (comp (rew5@3 (id2@2- (id x)) (rew2@1 b (id x)) (id2@2@1U x) (rew2@2 (id x) c) (id2@1 (id x))) (id5@3F (id2@2- (id x)) (rew2@1 b (id x)) (rew2@2 (id x) c) (id2@1 (id x))))))
      -> rew3@2 (id2@2- (id x)) (rrewUL r c) (id2@1 (id x)).
let bug (x : *) = y.


coh rrewDL (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
    	     	   (z : *) (h : y -> z) (k : y -> z) (c : h -> k) :
	comp (rew2@2 f c) (rew2@1 a k) -> comp (rew2@2 f c) (rew2@1 b k)

coh rrewDR (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) 
  	     	   (z : *) (h : y -> z) (k : y -> z) (b : h -> k) (c : h -> k) (r : b -> c)  :
	comp (rew2@1 a h) (rew2@2 g b) -> comp (rew2@1 a h) (rew2@2 g c)

coh rrewUR (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) 
  	     	   (z : *) (h : y -> z) (k : y -> z) (b : h -> k) (c : h -> k) (r : b -> c)  :
	comp (rew2@2 f b) (rew2@1 a k) -> comp (rew2@2 f c) (rew2@1 a k)

coh exchH1 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
     	       	  (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
	comp (rrewUL r c) (rrewDR b s) -> comp (rrewDR a s) (rrewUL r d)

coh exchH1- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
     	       	   (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
	comp (rrewUL r c) (rrewDR b s) -> comp (rrewDR a s) (rrewUL r d)

coh exchH2 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
     	       	  (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
	comp (rrewDL r c) (rrewUR b s) -> comp (rrewUR a s) (rrewDL r d)

coh exchH2- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
     	       	   (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
	comp (rrewUR a s) (rrewDL r d) -> comp (rrewDL r c) (rrewUR b s)

coh exchV1 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
     	       	   (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
	comp (rrewUL r c) (rrewDR b s) ->
	comp3 (exch a c) (comp (rrewDL r c) (rrewUR b s)) (exch- b d)

coh exchV1- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
     	       	    (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
	comp3 (exch a c) (comp (rrewDL r c) (rrewUR b s)) (exch- b d) ->
	comp (rrewUL r c) (rrewDR b s)

coh exchV2 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
     	       	   (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
	comp (rrewDR a s) (rrewUL r d) ->
	comp3 (exch a c) (comp (rrewUR a s) (rrewDL r d)) (exch- b d)

coh exchV2- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
     	       	    (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
	comp3 (exch a c) (comp (rrewUR a s) (rrewDL r d)) (exch- b d) ->
	comp (rrewDR a s) (rrewUL r d)

coh exch3D (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
     	       	   (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
	exchH1 r s -> comp3 (exchV1 r s) (rew3@2 (exch a c) (exchH2 r s) (exch- b d)) (exchV2- r s)	    




### Tests for combining exchanges
# coh rrew2A@1 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
#     	     	     (z : *) (h : y -> z) (k : y -> z) (c : h -> k) :
# 	rew2A a c -> rew2A b c


# coh rrew2A@2 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) 
#     	     	     (z : *) (h : y -> z) (k : y -> z) (b : h -> k) (c : h -> k) (r : b -> c)  :
# 	rew2A a b -> rew2A a c

# coh exchbis (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
#     	       	  (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
# 	comp (rrew2A@1 r c) (rrew2A@2 b s) -> comp (rrew2A@2 a s) (rrew2A@1 r d)

# coh exchbis- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
#     	       	  (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
# 	comp (rrew2A@2 a s) (rrew2A@1 r d) -> comp (rrew2A@1 r c) (rrew2A@2 b s)


# S = Sequential
# coh rew2AS (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
#     	      	   (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
# 	comp (rew2@1 a h) (rew2@2 g b) -> rew2A a b

# coh rew2AS- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
#     	      	   (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
# 	rew2A a b -> comp (rew2@1 a h) (rew2@2 g b)

# coh rew2ASC (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
#     	      	   (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
# 	comp (rew2@2 f b) (rew2@1 a k) -> rew2A a b

# coh rew2ASC- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
#     	      	   (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
# 	rew2A a b -> comp (rew2@2 f b) (rew2@1 a k) 


# coh v1 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
#     	       	  (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
# 	comp3 (rew2AS a c) (comp (rrew2A@2 a s) (rrew2A@1 r d)) (rew2AS- b d) ->
# 	rew2A (rrew2@1 r h) (rrew2@2 g s)

# coh v2- (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
#     	       	(z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) :
# 	rew2A (rrew2@2 f s) (rrew2@1 r k) ->
# 	comp3 (rew2ASC a c) (comp (rrew2A@1 r c) (rrew2A@2 b s)) (rew2ASC- b d)

# let test (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
#     	       	  (z : *) (h : y -> z) (k : y -> z) (c : h -> k) (d : h -> k) (s : c -> d) =
# 	comp3 (rew2@1 (v1 r s) (exch b d)) (exch2 r s) (rew2@2 (exch a c) (v2- r s))


### Eckamnn-Hilton 2
# coh rew2comp3A (x : *) (y : *) (f0 : x -> y) (f1 : x -> y) (a1 : f0 -> f1)
#                                              (f2 : x -> y) (a2 : f1 -> f2)
# 					     (f3 : x -> y) (a3 : f2 -> f3)
# 		       (z : *) (g0 : y -> z) (g1 : y -> z) (b1 : g0 -> g1)
# 		                             (g2 : y -> z) (b2 : g1 -> g2)
# 		                 	     (g3 : y -> z) (b3 : g2 -> g3) :
# 	rew2A (comp3 a1 a2 a3) (comp3 b1 b2 b3) -> comp3 (rew2A a1 b1) (rew2A a2 b2) (rew2A a3 b3)

# let eh2 (x : *) (a : id (id x) -> id (id x)) (b : id (id x) -> id (id x)) =
#   comp (rrew2A (rrew2@1id@2- a) (rrew2@2id@1- b))
#        (rew2comp3A (rew2@1id@2- (id (id x)))
#        		   (rew3@2 (id2@2- (id x)) (rrew2@1 a (id x)) (id2@2 (id x)))
# 		   (rew2@1id@2 (id (id x)))
# 		   (rew2@2id@1- (id (id x)))
# 		   (rew3@2 (id2@1- (id x)) (rrew2@2 (id x) b) (id2@1 (id x)))
# 		   (rew2@2id@1 (id (id x)))) 



# ### vertical arrows, yet to be defined
# coh bla (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) (b : f -> g) (r : a -> b)
#     	       	               	     (h : x -> y) (c : g -> h) (d : g -> h) (s : c -> d) :
# 	rew2A r s -> comp (rew2@1 r c) (rew2@2 b s) 

# coh exch (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
#     	      	 (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
# 		 comp (rew2@1 a h) (rew2@2 g b) -> comp (rew2@2 f b) (rew2@1 a k)

